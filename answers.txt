# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Wai Lun Ho	
Student ID: 103930546
Email: arlonghk@gmail.com

# Partner 2 (if you're working in a team)
Name: Nabil Nathani
Student ID: 803782632
Email: nabilnathani@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
Using fork method. For each file of download or upload, it fork a 
process to do the job(download or upload). 

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
Because the file name size is limited to 256, if a file is actually
larger than 256, using strcpy would trigger the buffer overrun bug and
adds unwanted character to the end of file name. So copying the string
with a fixed size(strncpy with 256 size) would avoid that. And so hackers
can't use this bug to make us to download files that made by them.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1) It detects if the file name requested is too long to avoid uploading 
wrong files(files that we do not want to upload).

2) It detects if file requested is in the correct directory. 
(same security issue as 1 above)

3) It detects if the file size exceed 2 Gib to prevent to prevent another
peer to fill up this peer's disk.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
1) Modified task_upload so that it uploads an unlimited size of data
to fill up the downloader's disk.

2) Modified task_download so that it keep requesting the same file 
over and over asking the peer to upload it. So the peer would
keep uploading unless it refuse to, but the skeleton code
does not protect the peer from that.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
search for 
exercise 1
exercise 2
exercise 3
to locate the added codes.